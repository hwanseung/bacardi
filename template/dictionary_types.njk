{%- macro printType(type) -%}
{%- if type == 'string' -%}
  std::{{type}}
{%- else -%}
  {{type}}
{%- endif -%}
{%- endmacro -%}

/**
 * Copyright (c) 2017 The Bacardi Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef GEN_DICTIONARY_{{name | snakecase | upper}}_H_
#define GEN_DICTIONARY_{{name | snakecase | upper}}_H_

class {{name}} {
public:
{% for member in members %}
  {{printType(member.type)}} {{member.name}}() const {
    return {{member.name}}_;
  }
  void set{{member.name | pascalcase}}({{printType(member.type)}} {{member.name}}) {
    {{member.name}}_ = {{member.name}};
  }
{% endfor %}
private:
{% for member in members %}
  {{printType(member.type)}} {{member.name}}_;
{% endfor %}
};

#endif  // GEN_DICTIONARY_{{name | snakecase | upper}}_H_
